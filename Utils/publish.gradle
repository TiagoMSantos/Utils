def githubProperties = new Properties()
githubProperties.load(
        new FileInputStream(rootProject.file("github.properties"))
)

def getVersionName = { ->
    return "0.0.2"
}

def getArtifactId = { ->
    return "utils"
}

publishing {
    publications {
        utils(MavenPublication) {
            groupId 'com.tiagomdosantos'
            artifactId getArtifactId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")
            pom.withXml { // adding transitive dependencies...
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null ||
                            dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode
                            .appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode
                                .appendNode('exclusions')
                                .appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode
                                .appendNode('exclusions')
                                .appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode(
                                    'groupId', rule.group ?: '*')
                            exclusionNode.appendNode(
                                    'artifactId', rule.module ?: '*')
                        }
                    }
                } // end addDependency
                configurations.compile.getDependencies().each { dep ->
                    addDependency(dep, "compile")
                }
                configurations.api.getDependencies().each { dep ->
                    addDependency(dep, "compile")
                }
                configurations.implementation.getDependencies().each { dep ->
                    addDependency(dep, "runtime")
                }
            } // end pomWithXml
        }
    }

    repositories {
        maven {
            name = "Utils"
            description = 'Library with common methods and classes'
            url = uri("https://maven.pkg.github.com/TiagoMSantos/utils")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}